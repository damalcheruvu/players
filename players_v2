@Claude-3.5-Sonnet-200k can you run this code few iteratuons internally and let me know how combinations fared up. check any anmories, issues with randomisation etc. import random
from itertools import combinations
from collections import defaultdict

PLAYERS_TEXT = """
Appa
Jeevan
Koti
Madhu
Murali
Phani
Prasad
Praveen
Raghu R
Rambabu
Rao Seema
Ravi G
Tarun
Sreeni
Subhani
Tripura
Srinivas
Vijay
Randeep
"""

CONFIG = {
    "max_courts": 4,
    "max_rounds": 10,
    "print_stats": False,
    "weights": {
        "PARTNERSHIP": 2000,
        "OPPOSITION": 800,
        "GAME_BALANCE": 200,
        "NEW_INTERACTION": 400
    },
    "random_seed": 42
}

class BadmintonManager:
    def __init__(self, max_courts=4, max_rounds=10, print_stats=False, weights=None, random_seed=None):
        self.max_courts = max_courts
        self.max_rounds = max_rounds
        self.print_stats = print_stats
        self.players = set()
        self.partner_history = defaultdict(lambda: defaultdict(int))
        self.opponent_history = defaultdict(lambda: defaultdict(int))
        self.court_history = defaultdict(lambda: defaultdict(int))
        self.rest_history = defaultdict(int)
        self.games_played = defaultdict(int)
        self.weights = weights or CONFIG["weights"]
        if random_seed is not None:
            random.seed(random_seed)

    def load_players(self, players_text):
        self.players = set(player.strip() for player in players_text.strip().split("\n") if player.strip())
        if len(self.players) < 4:
            raise Exception("Need at least 4 players to create games")

    def update_history(self, team1, team2, court):
        for p1, p2 in combinations(team1, 2):
            self.partner_history[p1][p2] += 1
            self.partner_history[p2][p1] += 1
        for p1, p2 in combinations(team2, 2):
            self.partner_history[p1][p2] += 1
            self.partner_history[p2][p1] += 1
        for p1 in team1:
            for p2 in team2:
                self.opponent_history[p1][p2] += 1
                self.opponent_history[p2][p1] += 1
        for player in team1 | team2:
            self.court_history[player][court] += 1
            self.games_played[player] += 1

    def calculate_team_score(self, team1, team2):
        score = 0
        for t1p1, t1p2 in combinations(team1, 2):
            score -= self.weights['PARTNERSHIP'] * self.partner_history[t1p1][t1p2]
        for t2p1, t2p2 in combinations(team2, 2):
            score -= self.weights['PARTNERSHIP'] * self.partner_history[t2p1][t2p2]
        for p1 in team1:
            for p2 in team2:
                score -= self.weights['OPPOSITION'] * self.opponent_history[p1][p2]
        team1_games = sum(self.games_played[p] for p in team1)
        team2_games = sum(self.games_played[p] for p in team2)
        score -= self.weights['GAME_BALANCE'] * abs(team1_games - team2_games)
        for p1 in team1:
            for p2 in team2:
                if self.opponent_history[p1][p2] == 0:
                    score += self.weights['NEW_INTERACTION']
        return score

    def generate_round(self, round_num):
        available_players = list(self.players)
        num_players_needed = self.max_courts * 4
        
        if len(available_players) < num_players_needed:
            num_courts = len(available_players) // 4
        else:
            num_courts = self.max_courts

        num_players_needed = num_courts * 4
        resting_players = set()

        if len(available_players) > num_players_needed:
            players_by_rest = sorted(available_players, 
                                   key=lambda p: (self.rest_history[p], random.random()))
            num_to_rest = len(available_players) - num_players_needed
            resting_players = set(players_by_rest[:num_to_rest])
            for player in resting_players:
                self.rest_history[player] += 1
            available_players = [p for p in available_players if p not in resting_players]

        best_assignments = []
        players_per_court = len(available_players) // num_courts
        
        for court in range(num_courts):
            remaining_players = [p for p in available_players if not any(p in team 
                               for assignment in best_assignments 
                               for team in assignment[1:])]
            
            best_score = float('-inf')
            best_teams = None

            for _ in range(50):
                court_players = random.sample(remaining_players, players_per_court)
                
                for _ in range(20):
                    random.shuffle(court_players)
                    team1 = set(court_players[:players_per_court // 2])
                    team2 = set(court_players[players_per_court // 2:])
                    
                    score = self.calculate_team_score(team1, team2)
                    
                    if score > best_score:
                        best_score = score
                        best_teams = (team1, team2)

            if best_teams:
                best_assignments.append((court + 1, best_teams[0], best_teams[1]))
                self.update_history(best_teams[0], best_teams[1], court + 1)

        return resting_players, best_assignments

    def print_schedule(self):
        for round_num in range(1, self.max_rounds + 1):
            resting_players, court_assignments = self.generate_round(round_num)
            
            print(f"𝐑𝐨𝐮𝐧𝐝 {round_num}")
            print(f"𝐑𝐞𝐬𝐭𝐢𝐧𝐠 𝐏𝐥𝐚𝐲𝐞𝐫𝐬: {', '.join(sorted(resting_players))}")
            
            for court, team1, team2 in court_assignments:
                print(f"Court {court}: {', '.join(sorted(team1))} vs {', '.join(sorted(team2))}")
            print("-" * 50)

        if self.print_stats:
            self.print_player_stats()

    def print_player_stats(self):
        print("\n𝐏𝐥𝐚𝐲𝐞𝐫 𝐒𝐭𝐚𝐭𝐢𝐬𝐭𝐢𝐜𝐬:")
        print("=" * 50)
        
        for player in sorted(self.players):
            print(f"\n𝐏𝐥𝐚𝐲𝐞𝐫: {player}")
            print("-" * 20)
            
            # Games and Rest stats
            print(f"Games Played: {self.games_played[player]}")
            print(f"Times Rested: {self.rest_history[player]}")
            
            # Partnership stats
            print("\nPartnership History:")
            partnerships = [(partner, count) for partner, count 
                          in self.partner_history[player].items() if count > 0]
            partnerships.sort(key=lambda x: (-x[1], x[0]))  # Sort by count (desc) then name
            for partner, count in partnerships:
                print(f"  - with {partner}: {count} times")
            
            # Opposition stats
            print("\nOpposition History:")
            oppositions = [(opp, count) for opp, count 
                         in self.opponent_history[player].items() if count > 0]
            oppositions.sort(key=lambda x: (-x[1], x[0]))
            for opp, count in oppositions:
                print(f"  - against {opp}: {count} times")
            
            # Court distribution
            print("\nCourt Distribution:")
            for court, count in sorted(self.court_history[player].items()):
                print(f"  - Court {court}: {count} times")
            
            print("\n" + "=" * 50)

def main():
    try:
        manager = BadmintonManager(
            max_courts=CONFIG["max_courts"],
            max_rounds=CONFIG["max_rounds"],
            print_stats=CONFIG["print_stats"],
            weights=CONFIG["weights"],
            random_seed=CONFIG["random_seed"]
        )
        manager.load_players(PLAYERS_TEXT)
        manager.print_schedule()
    except Exception as e:
        print(f"Error: {str(e)}")

if __name__ == "__main__":
    main()
